1.css定位
	a.单一属性定位
		a1.标签选择器
			find_element_by_css_selector('input')
			$('input')
		a2.id选择器
			find_element_by_css_selector("#kw")
			$("#kw")
		a3.class选择器
			find_element_by_css_selector(".s_ipt")
			$('.s_ipt')
		a4.其他属性定位
			find_element_by_css_selector("[name='wd']")
			$("[name='wd']")
		注意：可以通过浏览器的console进行元素的定位
	b.组合属性定位
		b1.id组合属性定位
		b2.class组合属性定位
		b3.其他属性组合
		b4.只有属性名，没有值
		b5.两个其他属性定位
		b6.模糊匹配
			属性有多个空格分开，匹配其中一个值的方法
			匹配属性值为字符串开头的方法
			匹配属性值为字符串结尾的方法
2.xpath定位
	针对xml的路径语言，通过元素的路径来找到这个元素
	a.工具
		F12 
		firebug
	b.用法
		/ 	绝对路径，从根节点选取元素
		//  相对路径，所有子节点中搜索对应元素
		@   选取属性
		.   当前节点
		..  当前节点的父节点
		注意:通过浏览器的F12的console进行调试$x()
		b1.xpath支持id、class、name进行定位
			通过id定位
				$x("//*[@id='kw']")
				$x("//input[@id='kw']")
			通过name定位
				$x("//*[@name='wd']")
			通过class定位
				$x("//*[@class='s_ipt']")
				$x("//input[@class='s_ipt']")
		b2.如果没id，class，name属性，xpath支持属性定位功能
			$x("//*[@autocomplete='off']")
		b3.通过层级关系定位元素
			1>通过相对路径来定位元素
				$x("//a[@class='mnav'][1]")
			2>通过绝对路径来定位元素
				$x("/html/body/div[1]/div[1]")
		b4.xpath的运算符
			and   同时满足条件
			or    满足一个条件即可
			$x("//a[@class='mnav' and @name='tj_trnews']")
3.定位一组元素
	find element  定位一个元素(查找唯一元素)
		仅仅查找返回页面符合条件的第一个元素
		如果定位不到元素会报错
	find elements 定位一组元素(查找多个元素)
		查找多个元素并且返回一个列表
		如果定位不到元素不会报错，返回一个空列表
	补充:元素.get_attribute("name")  获取name属性的值
4.selenium对浏览器操作
	a.控制浏览器窗口大小
		set_windows_size()  浏览器窗口大小
	b.窗口最大化
		maximize_window()    浏览器窗口最大化
	c.窗口最小化
		minimize_window()    浏览器窗口最小化
	d.浏览器的前进和后退
		前进 forward（）
		后退 back()
	e.浏览器的刷新
		refresh()
	f.窗口截屏
		get_screenshot_as_file() 截屏一般都是.png结尾的文件
	g.浏览器的退出
		quit()
5.鼠标操作
	单击
		click()
	双击
		double_click()
	滚轮
		sorry
	右键
		context_click()
	拖拽
		drag_and_drop()
	执行
		perform()











